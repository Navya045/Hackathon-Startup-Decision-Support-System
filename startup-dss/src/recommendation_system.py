import openai

def generate_dynamic_recommendations(industry, kpi, df, api_key):
    """
    Generate top 10 dynamic recommendations specific to the given KPI and industry
    using OpenAI's API, incorporating pre-existing industry and KPI knowledge.
    """
    openai.api_key = api_key

    # Filter data for the specific industry
    industry_context = df[df['Industry'] == industry]['News Headline'].tolist()
    
    # Extract KPI-related values for the industry
    kpi_values = df[df['Industry'] == industry][kpi].dropna().tolist()

    # Check if there is enough context for the industry and KPI
    if not industry_context:
        raise ValueError(f"No industry context (news headlines) found for '{industry}'.")
    if not kpi_values:
        raise ValueError(f"No KPI-specific data found for '{kpi}' in the '{industry}' industry.")

    # Combine the extracted context to build the prompt
    prompt = (
        f"You are an expert advisor specializing in the '{industry}' industry.\n"
        f"Your goal is to provide actionable recommendations to improve the KPI '{kpi}'.\n\n"
        f"### Industry Context ###\n"
        f"Here are some recent news headlines related to the '{industry}' industry:\n"
        f"{', '.join(industry_context[:5])}\n\n"
        f"### KPI Data ###\n"
        f"Here are example data points for the KPI '{kpi}' in the '{industry}' industry:\n"
        f"{', '.join([str(val) for val in kpi_values[:5]])}\n\n"
        f"### Task ###\n"
        f"Based on the provided context, generate 10 specific and actionable recommendations "
        f"that a business in the '{industry}' industry can implement to improve their '{kpi}'. "
        f"Focus exclusively on strategies for '{kpi}' and avoid generic advice.\n"
        f"Return your recommendations as a numbered list, starting with '1.'. Dont give in bold format."
        
    )

    # Call OpenAI API to generate recommendations
    response = openai.ChatCompletion.create(
        model="gpt-4",  # Use "gpt-3.5-turbo" if "gpt-4" is unavailable
        messages=[
            {"role": "system", "content": "You are an expert business advisor."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=500,
        temperature=0.7
    )

    # Extract and process the response
    generated_text = response['choices'][0]['message']['content']
    return process_recommendations(generated_text)

def process_recommendations(generated_text):
    """
    Process the raw text generated by the model into a list of actionable recommendations.
    """
    # Extract recommendations by splitting the output text into lines
    recommendations = [line.strip() for line in generated_text.split("\n") if line.strip().startswith(("1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10."))]

    # Ensure exactly 10 recommendations; truncate or pad if necessary
    if len(recommendations) > 10:
        return recommendations[:10]
    elif len(recommendations) < 10:
        recommendations += ["More recommendations can be added manually."] * (10 - len(recommendations))
    return recommendations
